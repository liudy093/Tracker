// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: TaskStatusTracker.proto

package TaskStatusTrackerProto

import (
	"bytes"
	"log"
	"strconv"
	//"container/list"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TaskStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowID string                         `protobuf:"bytes,1,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	NodeState  []*TaskStateRequest_NodesState `protobuf:"bytes,2,rep,name=nodeState,proto3" json:"nodeState,omitempty"`
	IP         string                         `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *TaskStateRequest) GetInfo() string{
	workflowId := x.WorkflowID
	IP := x.IP
	//var buffer bytes.Buffer
	done := "Done"
	var buffer bytes.Buffer
	buffer.WriteString("IP:")
	buffer.WriteString(IP)
	buffer.WriteString("-{Workflow-")
	buffer.WriteString(workflowId)
	buffer.WriteString("-")
	for i:=0; i<len(x.NodeState);i++{
		//buffer.WriteString("[Workflow-")
		buffer.WriteString("[Task-")
		var s string = strconv.Itoa(int(x.NodeState[i].TaskID))
		buffer.WriteString(s)
		buffer.WriteString("-")
		buffer.WriteString(x.NodeState[i].TaskPodName)
		buffer.WriteString("-")
		buffer.WriteString(x.NodeState[i].TaskState)
		buffer.WriteString("]")
	}
	out := buffer.String()
	log.Printf("%v", out)
	return done
}

func (x *TaskStateRequest) GetEachInfo() string{
	done := "done"
	var buffer1 bytes.Buffer
	buffer1.WriteString("WorkflowID:")
	buffer1.WriteString(x.WorkflowID)
	out1 := buffer1.String()
	log.Printf("%v", out1)
	
	
	for i:=0; i<len(x.NodeState);i++{
		var buffer3 bytes.Buffer
		//buffer.WriteString("[Workflow-")
		buffer3.WriteString("[TaskID-")
		var s string = strconv.Itoa(int(x.NodeState[i].TaskID))
		buffer3.WriteString(s)
		buffer3.WriteString("]")
		out3 := buffer3.String()
		log.Println(out3)
		
		var buffer4 bytes.Buffer
		buffer4.WriteString("[Status-")
		buffer4.WriteString(x.NodeState[i].TaskState)
		buffer4.WriteString("]")
		out4 := buffer4.String()
	    log.Println(out4)
	}
	return done
}

func (x *TaskStateRequest) GetRegistInfo() string{
	done := "done"
	var buffer1 bytes.Buffer
	buffer1.WriteString("WorkflowID:")
	buffer1.WriteString(x.WorkflowID)
	out1 := buffer1.String()
	log.Printf("%v", out1)
	
	var buffer2 bytes.Buffer
	buffer2.WriteString("IP:")
	buffer2.WriteString(x.IP)
	out2 := buffer2.String()
	log.Printf("%v", out2)
	
	
	for i:=0; i<len(x.NodeState);i++{
		var buffer3 bytes.Buffer
		//buffer.WriteString("[Workflow-")
		buffer3.WriteString("[Task-")
		var s string = strconv.Itoa(int(x.NodeState[i].TaskID))
		buffer3.WriteString(s)
		buffer3.WriteString("]")
		out3 := buffer3.String()
		log.Println(out3)
		
		var buffer4 bytes.Buffer
		buffer4.WriteString("[TaskPodName-")
		buffer4.WriteString(x.NodeState[i].TaskPodName)
		buffer4.WriteString("]")
		out4 := buffer4.String()
	    log.Println(out4)
	}
	return done
}


func (x *TaskStateRequest) Reset() {
	*x = TaskStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskStatusTracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateRequest) ProtoMessage() {}

func (x *TaskStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_TaskStatusTracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStateRequest.ProtoReflect.Descriptor instead.
func (*TaskStateRequest) Descriptor() ([]byte, []int) {
	return file_TaskStatusTracker_proto_rawDescGZIP(), []int{0}
}

func (x *TaskStateRequest) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *TaskStateRequest) GetNodeState() []*TaskStateRequest_NodesState {
	if x != nil {
		return x.NodeState
	}
	return nil
}

func (x *TaskStateRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type TaskStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accept uint32 `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (x *TaskStateReply) Reset() {
	*x = TaskStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskStatusTracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateReply) ProtoMessage() {}

func (x *TaskStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_TaskStatusTracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStateReply.ProtoReflect.Descriptor instead.
func (*TaskStateReply) Descriptor() ([]byte, []int) {
	return file_TaskStatusTracker_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStateReply) GetAccept() uint32 {
	if x != nil {
		return x.Accept
	}
	return 0
}

type TaskStateRequest_NodesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int32  `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskPodName string `protobuf:"bytes,2,opt,name=taskPodName,proto3" json:"taskPodName,omitempty"`
	TaskState   string `protobuf:"bytes,3,opt,name=taskState,proto3" json:"taskState,omitempty"`
}

func (x *TaskStateRequest_NodesState) Reset() {
	*x = TaskStateRequest_NodesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TaskStatusTracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStateRequest_NodesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateRequest_NodesState) ProtoMessage() {}

func (x *TaskStateRequest_NodesState) ProtoReflect() protoreflect.Message {
	mi := &file_TaskStatusTracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStateRequest_NodesState.ProtoReflect.Descriptor instead.
func (*TaskStateRequest_NodesState) Descriptor() ([]byte, []int) {
	return file_TaskStatusTracker_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TaskStateRequest_NodesState) GetTaskID() int32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskStateRequest_NodesState) GetTaskPodName() string {
	if x != nil {
		return x.TaskPodName
	}
	return ""
}

func (x *TaskStateRequest_NodesState) GetTaskState() string {
	if x != nil {
		return x.TaskState
	}
	return ""
}

var File_TaskStatusTracker_proto protoreflect.FileDescriptor

var file_TaskStatusTracker_proto_rawDesc = []byte{
	0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xf6, 0x01, 0x0a,
	0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x12, 0x4c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x1a,
	0x64, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x32,
	0x6d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x83,
	0x01, 0x0a, 0x22, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TaskStatusTracker_proto_rawDescOnce sync.Once
	file_TaskStatusTracker_proto_rawDescData = file_TaskStatusTracker_proto_rawDesc
)

func file_TaskStatusTracker_proto_rawDescGZIP() []byte {
	file_TaskStatusTracker_proto_rawDescOnce.Do(func() {
		file_TaskStatusTracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_TaskStatusTracker_proto_rawDescData)
	})
	return file_TaskStatusTracker_proto_rawDescData
}

var file_TaskStatusTracker_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_TaskStatusTracker_proto_goTypes = []interface{}{
	(*TaskStateRequest)(nil),            // 0: TaskStatusTracker.TaskStateRequest
	(*TaskStateReply)(nil),              // 1: TaskStatusTracker.TaskStateReply
	(*TaskStateRequest_NodesState)(nil), // 2: TaskStatusTracker.TaskStateRequest.NodesState
}
var file_TaskStatusTracker_proto_depIdxs = []int32{
	2, // 0: TaskStatusTracker.TaskStateRequest.nodeState:type_name -> TaskStatusTracker.TaskStateRequest.NodesState
	0, // 1: TaskStatusTracker.TaskStatusTracker.InputTaskState:input_type -> TaskStatusTracker.TaskStateRequest
	1, // 2: TaskStatusTracker.TaskStatusTracker.InputTaskState:output_type -> TaskStatusTracker.TaskStateReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_TaskStatusTracker_proto_init() }
func file_TaskStatusTracker_proto_init() {
	if File_TaskStatusTracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_TaskStatusTracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TaskStatusTracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TaskStatusTracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStateRequest_NodesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TaskStatusTracker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_TaskStatusTracker_proto_goTypes,
		DependencyIndexes: file_TaskStatusTracker_proto_depIdxs,
		MessageInfos:      file_TaskStatusTracker_proto_msgTypes,
	}.Build()
	File_TaskStatusTracker_proto = out.File
	file_TaskStatusTracker_proto_rawDesc = nil
	file_TaskStatusTracker_proto_goTypes = nil
	file_TaskStatusTracker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskStatusTrackerClient is the client API for TaskStatusTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskStatusTrackerClient interface {
	InputTaskState(ctx context.Context, in *TaskStateRequest, opts ...grpc.CallOption) (*TaskStateReply, error)
}

type taskStatusTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskStatusTrackerClient(cc grpc.ClientConnInterface) TaskStatusTrackerClient {
	return &taskStatusTrackerClient{cc}
}

func (c *taskStatusTrackerClient) InputTaskState(ctx context.Context, in *TaskStateRequest, opts ...grpc.CallOption) (*TaskStateReply, error) {
	out := new(TaskStateReply)
	err := c.cc.Invoke(ctx, "/TaskStatusTracker.TaskStatusTracker/InputTaskState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskStatusTrackerServer is the server API for TaskStatusTracker service.
type TaskStatusTrackerServer interface {
	InputTaskState(context.Context, *TaskStateRequest) (*TaskStateReply, error) // *
}

// UnimplementedTaskStatusTrackerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskStatusTrackerServer struct {
}

func (*UnimplementedTaskStatusTrackerServer) InputTaskState(context.Context, *TaskStateRequest) (*TaskStateReply, error) { // *
	return nil, status.Errorf(codes.Unimplemented, "method InputTaskState not implemented")
}

func RegisterTaskStatusTrackerServer(s *grpc.Server, srv TaskStatusTrackerServer) {
	s.RegisterService(&_TaskStatusTracker_serviceDesc, srv)
}

func _TaskStatusTracker_InputTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) { // *
	in := new(TaskStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskStatusTrackerServer).InputTaskState(ctx, in) //*
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskStatusTracker.TaskStatusTracker/InputTaskState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskStatusTrackerServer).InputTaskState(ctx, req.(*TaskStateRequest)) // *
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskStatusTracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskStatusTracker.TaskStatusTracker",
	HandlerType: (*TaskStatusTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InputTaskState",
			Handler:    _TaskStatusTracker_InputTaskState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TaskStatusTracker.proto",
}
